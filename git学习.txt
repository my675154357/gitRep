一、安装
根据提示安装完成后，使用：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
在本机配置好，每次提交将会提交这些信息，会公开，注意保护隐私。
另外，使代码增加可读，显示不同的颜色用：git config --global color.ui auto

二、配置工作区
在本地新建一个文件夹，并在此处使用git init 命令将文件夹变为git的工作区，之后git将会提交这里的文件。
查看仓库状态：git status（插曲：在执行git status这个命令时，中文名的文件显示为数字，解决方法：在git安装目录下打开git-bash.exe，执行git config –-global core.quotepath false即可解决）

三、提交
git add filename(文件名) .将文件从工作区提交到暂存区。
git commit -m "注释内容" .将文件从暂存区所有的文件全部提交到本地仓（所以不用加文件名），第一次提交必须加注释，否则无法提交。如果提交的注释过多，可以不加-m，直接回车，将会进入到vim编辑器界面，进行添加注释即可。如果在写注释的中途突然不想提交了，直接:q！退出，即可终止提交。
git commit -am "注释内容"  。可以将git add和git commit连写提交。但是如果一个文件从未add和commit过，这样写可不行，文件必须提交过才可以连写。
git push将文件从本地仓提交到远程仓。
git commit --amend 。修改当前版本的提交注释。
git rebase -i HEAD~n  。压缩历史，表示将前n个记录合并为一个，运行后稍等一会会自动打开vim编辑器，需要合并的几个版本号会显示出来 "pick 版本号 注释"这样显示，此时将需要擦除的记录前面的pick 修改成fixup，这条记录就会消失，之后会重新生成新的版本号和日志，内容仍以最新提交的为准 。在合并分支之前，如果发现已经提交的内容（指文本内容，不是注释）有错误，可能是拼写错误或者其他，如果修正了内容再从新提交，则日志又会多出一条记录，这本应该是没必要的信息。此时可以提交一个修改后的内容，然后将这个内容包含到前一个提交中，压缩成一个历史记录，这样就不会多出一条没必要的日志记录了，这个操作会常用。


四、查看日志
git log [filename]      。查看提交日志，如果在后面加上文件名或目录名，就会显示相应文件或目录的日志。如果日志太长，按空格显示下一页。 --pretty=short日志就不会显示提交的日期。
git log -p [filename]   。显示日志提交前后，文件内容的改动。

五、版本差异
git diff 。显示工作区与暂存区的区别。
git diff HEAD   。显示工作区与本地仓的区别。HEAD表示最新的版本） -表示删掉的行内容，+表示新增的行内容，但只能显示文本文件的行内容差异，二进制文件则不行、

六、删除和版本回退
git reset --hard 版本号   。回到相应的版本号，版本号写上前几位都行，只要能唯一区别就行了。
git reset --hrad HEAD^    。回到前一个版本号，几个^就表示前几个，也可以git reset --hard HEAD~n ，n是几就是前几个版本。

tip：值得注意的地方，把我坑到了，把笔记记录在工作区内，结果测试版本回退发现找不到最新的笔记了，为了这个来回看了三遍视频重新记笔记。终于摸清了这个版本回退的规则。
假如有个新增的文件a.txt，初始导入假设版本号为1（因为git是分布式管理，真实的版本号用的是哈希码，这里为了叙述和理解方便，假设版本号是1 2 3 ...）。做了一次修改后提交，版本号为2，然后继续修改提交了n次后，假设此时已经有6个版本了。使用git log 查看所有的版本是6（HEAD） 5 4 3 2 1。此时使用git reset --hard 4 回退到第四个版本，那么再用git log 命令查看所有版本则显示4（HEAD） 3 2 1，如果再回退到第2个版本，日志显示的版本号就是2（HEAD） 1。也就是想要再回到最之前的版本6，这里是看不到版本号了，切记。 
git log 只能查看以当前状态为终点的日志记录。所以需要用git reflog。查看当前仓库的操作日志，在日志中找出回溯历史之前的哈希值。

git checkout -- filename   。修改文件后，还在工作区还未add到暂存区，想恢复到初始状态，用这个命令。如果误删了工作区的文件，也可以用这个命令将文件从暂存区恢复到工作区。
git reset HEAD filename    。修改文件后，已经add到了暂存区，还未commit到本地仓，想恢复到初始状态，用这个命令。

git commit -am "delete file filename"    。如果真想删除，在先做了删除操作后，再用这个命令。

七、分支管理
git branch  。查看所有分支，master分支是系统默认的，相对来说也是主干，后续开发的分支都是基于master为主干的分支。* 表示当前所处的分支。 后面加上一个名称即会在当前分支下创建新的分支。
git checkout -b    。创建并切换分支，git checkout 分支名 ，即为切换分支。git checkout -  ，切换到上一个分支。
git merge --no-ff 要合并的分支名  。如果想要将某个分支合并到主干上，则切换到主干分支，之后执行这个命令即可合并。
git log --graph   。以图表方式查看分支。
git branch -d 分支名   。删除已合并的分支，无法删除未合并的分支。
git branch --no-merged  。查看未合并的分支。
git branch -D 分支名    。强制删除未合并的分支。


八，关联远程仓
在github上创建一个仓库，建议与本地仓同名，方便一些。
注意：不要勾选Initialize this repository with a README这个选项，否则这个远程仓就不是空的了，本地仓提交到远程仓会起冲突，虽然可以强制覆盖，但比较麻烦。
add .gitignore：添加需要忽略的目录。比如项目中编译的target、out...文件，是不需要上传的，就可以忽略掉。
add a license：添加开源协议。

使用https协议，每次提交都需要输入用户名和密码。
ssh协议只需要提前配置好一次即可。推荐这个

git remote add origin https://github.com/my675154357/gitRep.git   origin相当与起别名，一般不用改。此时本地仓就与远程仓关联了

git push -u origin master  。提交到远程仓的master分支上去。如果是第一次push需要输入账户名和密码。
第二次push的时候就不需要加分支名，因为第一次已经关联了。
git push origin :分支名     。删除远程仓的分支。
git push -u origin 分支名    。创建远程仓的分支，并将当前分支本地仓库文件推送到新建的分支上去。

git clone github地址     。新建一个文件夹，项目下载到当前文件，无需初始化，直接在此处打开git bash执行命令
git branch -a    。同时显示本地仓和远程仓的分支信息.
git checkout -b 本地分支名 origin/远程分支名    。将远程仓的分支下载下来，如果本地没有该分支，则自动创建。并切换到该分支。

git pull  。拉取分支最新的内容(第一次推送分支时会自动将本地仓的分支与远程仓的分支关联，所以pull的时候就无需加分支名)